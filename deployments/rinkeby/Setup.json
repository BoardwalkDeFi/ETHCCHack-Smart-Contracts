{
  "address": "0xAa618621c371aadF982a017C1c310dcc587fc998",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stable",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bord",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract ITestToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bord",
      "outputs": [
        {
          "internalType": "contract ITestToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setMeUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dex",
          "type": "address"
        }
      ],
      "name": "setupLiquidityPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stable",
      "outputs": [
        {
          "internalType": "contract ITestToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa76b151668c2100ac611cc36edf97353e5d00b93ecf126470e66899556bee942",
  "receipt": {
    "to": null,
    "from": "0x27d2c7F2729029440bE539EaA61657d35b5A4AEA",
    "contractAddress": "0xAa618621c371aadF982a017C1c310dcc587fc998",
    "transactionIndex": 38,
    "gasUsed": "810568",
    "logsBloom": "0x
    "blockHash": "0x6196aa844d60f4c27bff28fee07b854710538aa519d3a60ee756688467e129cf",
    "transactionHash": "0xa76b151668c2100ac611cc36edf97353e5d00b93ecf126470e66899556bee942",
    "logs": [],
    "blockNumber": 11108650,
    "cumulativeGasUsed": "12344373",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42DCAA257a35e875D6D6B7401a85094cf40897Ea",
    "0x3c1339DA839900A7fBa612A934560dE4d82fE405",
    "0x700FF7B56546eF9239650E2B97cC7276E33dDD16"
  ],
  "numDeployments": 2,
  "solcInputHash": "e7d502e8048a020e0285085c81e8ce04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bord\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ITestToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bord\",\"outputs\":[{\"internalType\":\"contract ITestToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMeUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"setupLiquidityPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"contract ITestToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"contract to help demo by minting a user necessary tokens as well as starting the liquidity pool\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Testing/Setup.sol\":\"Setup\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Testing/Setup.sol\":{\"content\":\"//SPDX-License-Identifier: None\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITestToken is IERC20{\\n    function mint(address _to, uint _amount) external;\\n}\\n/// @dev contract to help demo by minting a user necessary tokens as well as starting the liquidity pool\\ncontract Setup{\\n\\n    ITestToken public stable;\\n    ITestToken public bord;\\n    ITestToken public asset;\\n    constructor(address _stable, address _bord, address _asset){\\n        stable = ITestToken(_stable);\\n        bord = ITestToken(_bord);\\n        asset = ITestToken(_asset);\\n    }\\n\\n    function setupLiquidityPools(address _dex) external{\\n        uint toMint = 2**100;\\n\\n        stable.mint(address(this),toMint);\\n        asset.mint(address(this),toMint);\\n        bord.mint(address(this),toMint);\\n        stable.approve(_dex, toMint);\\n        asset.approve(_dex, toMint);\\n        bord.approve(_dex, toMint);\\n\\n        IUniswapV2Router02(_dex).addLiquidity(\\n            address(stable),\\n            address(asset),\\n            toMint,\\n            toMint,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp+30\\n        );\\n\\n        IUniswapV2Router02(_dex).addLiquidity(\\n            address(stable),\\n            address(bord),\\n            toMint,\\n            toMint,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp+30\\n        );\\n\\n    }\\n\\n    function setMeUp() external{\\n        stable.mint(msg.sender, 100 ether);\\n        bord.mint(msg.sender, 100 ether);\\n        asset.mint(msg.sender, 100 ether);\\n    }\\n}\",\"keccak256\":\"0x3cd2c54ce3d55f42651fb3bf565497fc9cf1843f227afd4b57f1397de4ec732c\",\"license\":\"None\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x7d189e23c0505cc5b43e3f9b0cf09deaab57ac29228061db7c55fa5484c4286e\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0xb45e89fb2314353f3050c45cee0c98ce058760c109105047d391af970552739a\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e17380380610e1783398181016040528101906100329190610111565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506101a9565b60008151905061010b81610192565b92915050565b60008060006060848603121561012657600080fd5b6000610134868287016100fc565b9350506020610145868287016100fc565b9250506040610156868287016100fc565b9150509250925092565b600061016b82610172565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61019b81610160565b81146101a657600080fd5b50565b610c5f806101b86000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806322be3de11461005c57806338d52e0f1461007a5780636b0260221461009857806374764da2146100b457806387dbe0fb146100d2575b600080fd5b6100646100dc565b6040516100719190610ab4565b60405180910390f35b610082610100565b60405161008f9190610ab4565b60405180910390f35b6100b260048036038101906100ad91906108f8565b610126565b005b6100bc6106cb565b6040516100c99190610ab4565b60405180910390f35b6100da6106f1565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006c10000000000000000000000000905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610193929190610a8b565b600060405180830381600087803b1580156101ad57600080fd5b505af11580156101c1573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610222929190610a8b565b600060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b81526004016102b1929190610a8b565b600060405180830381600087803b1580156102cb57600080fd5b505af11580156102df573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b815260040161033e929190610a8b565b602060405180830381600087803b15801561035857600080fd5b505af115801561036c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103909190610921565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016103ee929190610a8b565b602060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190610921565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b815260040161049e929190610a8b565b602060405180830381600087803b1580156104b857600080fd5b505af11580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190610921565b508173ffffffffffffffffffffffffffffffffffffffff1663e8e3370060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848560008030601e426105649190610acf565b6040518963ffffffff1660e01b81526004016105879897969594939291906109e4565b606060405180830381600087803b1580156105a157600080fd5b505af11580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d9919061094a565b5050508173ffffffffffffffffffffffffffffffffffffffff1663e8e3370060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848560008030601e4261064f9190610acf565b6040518963ffffffff1660e01b81526004016106729897969594939291906109e4565b606060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c4919061094a565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193368056bc75e2d631000006040518363ffffffff1660e01b8152600401610755929190610a62565b600060405180830381600087803b15801561076f57600080fd5b505af1158015610783573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193368056bc75e2d631000006040518363ffffffff1660e01b81526004016107ed929190610a62565b600060405180830381600087803b15801561080757600080fd5b505af115801561081b573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193368056bc75e2d631000006040518363ffffffff1660e01b8152600401610885929190610a62565b600060405180830381600087803b15801561089f57600080fd5b505af11580156108b3573d6000803e3d6000fd5b50505050565b6000813590506108c881610be4565b92915050565b6000815190506108dd81610bfb565b92915050565b6000815190506108f281610c12565b92915050565b60006020828403121561090a57600080fd5b6000610918848285016108b9565b91505092915050565b60006020828403121561093357600080fd5b6000610941848285016108ce565b91505092915050565b60008060006060848603121561095f57600080fd5b600061096d868287016108e3565b935050602061097e868287016108e3565b925050604061098f868287016108e3565b9150509250925092565b6109a281610b25565b82525050565b6109b181610b6d565b82525050565b6109c081610b91565b82525050565b6109cf81610ba3565b82525050565b6109de81610b63565b82525050565b6000610100820190506109fa600083018b610999565b610a07602083018a610999565b610a1460408301896109d5565b610a2160608301886109d5565b610a2e60808301876109b7565b610a3b60a08301866109b7565b610a4860c0830185610999565b610a5560e08301846109d5565b9998505050505050505050565b6000604082019050610a776000830185610999565b610a8460208301846109c6565b9392505050565b6000604082019050610aa06000830185610999565b610aad60208301846109d5565b9392505050565b6000602082019050610ac960008301846109a8565b92915050565b6000610ada82610b63565b9150610ae583610b63565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b1a57610b19610bb5565b5b828201905092915050565b6000610b3082610b43565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b7882610b7f565b9050919050565b6000610b8a82610b43565b9050919050565b6000610b9c82610b63565b9050919050565b6000610bae82610b63565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610bed81610b25565b8114610bf857600080fd5b50565b610c0481610b37565b8114610c0f57600080fd5b50565b610c1b81610b63565b8114610c2657600080fd5b5056fea26469706673582212204a7fd5d229b8707307b7920066a4c7973fde9ea35e468192b49a397f6c2a6f2964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806322be3de11461005c57806338d52e0f1461007a5780636b0260221461009857806374764da2146100b457806387dbe0fb146100d2575b600080fd5b6100646100dc565b6040516100719190610ab4565b60405180910390f35b610082610100565b60405161008f9190610ab4565b60405180910390f35b6100b260048036038101906100ad91906108f8565b610126565b005b6100bc6106cb565b6040516100c99190610ab4565b60405180910390f35b6100da6106f1565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006c10000000000000000000000000905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610193929190610a8b565b600060405180830381600087803b1580156101ad57600080fd5b505af11580156101c1573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610222929190610a8b565b600060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b81526004016102b1929190610a8b565b600060405180830381600087803b1580156102cb57600080fd5b505af11580156102df573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b815260040161033e929190610a8b565b602060405180830381600087803b15801561035857600080fd5b505af115801561036c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103909190610921565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016103ee929190610a8b565b602060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190610921565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b815260040161049e929190610a8b565b602060405180830381600087803b1580156104b857600080fd5b505af11580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190610921565b508173ffffffffffffffffffffffffffffffffffffffff1663e8e3370060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848560008030601e426105649190610acf565b6040518963ffffffff1660e01b81526004016105879897969594939291906109e4565b606060405180830381600087803b1580156105a157600080fd5b505af11580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d9919061094a565b5050508173ffffffffffffffffffffffffffffffffffffffff1663e8e3370060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848560008030601e4261064f9190610acf565b6040518963ffffffff1660e01b81526004016106729897969594939291906109e4565b606060405180830381600087803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c4919061094a565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193368056bc75e2d631000006040518363ffffffff1660e01b8152600401610755929190610a62565b600060405180830381600087803b15801561076f57600080fd5b505af1158015610783573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193368056bc75e2d631000006040518363ffffffff1660e01b81526004016107ed929190610a62565b600060405180830381600087803b15801561080757600080fd5b505af115801561081b573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193368056bc75e2d631000006040518363ffffffff1660e01b8152600401610885929190610a62565b600060405180830381600087803b15801561089f57600080fd5b505af11580156108b3573d6000803e3d6000fd5b50505050565b6000813590506108c881610be4565b92915050565b6000815190506108dd81610bfb565b92915050565b6000815190506108f281610c12565b92915050565b60006020828403121561090a57600080fd5b6000610918848285016108b9565b91505092915050565b60006020828403121561093357600080fd5b6000610941848285016108ce565b91505092915050565b60008060006060848603121561095f57600080fd5b600061096d868287016108e3565b935050602061097e868287016108e3565b925050604061098f868287016108e3565b9150509250925092565b6109a281610b25565b82525050565b6109b181610b6d565b82525050565b6109c081610b91565b82525050565b6109cf81610ba3565b82525050565b6109de81610b63565b82525050565b6000610100820190506109fa600083018b610999565b610a07602083018a610999565b610a1460408301896109d5565b610a2160608301886109d5565b610a2e60808301876109b7565b610a3b60a08301866109b7565b610a4860c0830185610999565b610a5560e08301846109d5565b9998505050505050505050565b6000604082019050610a776000830185610999565b610a8460208301846109c6565b9392505050565b6000604082019050610aa06000830185610999565b610aad60208301846109d5565b9392505050565b6000602082019050610ac960008301846109a8565b92915050565b6000610ada82610b63565b9150610ae583610b63565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b1a57610b19610bb5565b5b828201905092915050565b6000610b3082610b43565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b7882610b7f565b9050919050565b6000610b8a82610b43565b9050919050565b6000610b9c82610b63565b9050919050565b6000610bae82610b63565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610bed81610b25565b8114610bf857600080fd5b50565b610c0481610b37565b8114610c0f57600080fd5b50565b610c1b81610b63565b8114610c2657600080fd5b5056fea26469706673582212204a7fd5d229b8707307b7920066a4c7973fde9ea35e468192b49a397f6c2a6f2964736f6c63430008040033",
  "devdoc": {
    "details": "contract to help demo by minting a user necessary tokens as well as starting the liquidity pool",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4482,
        "contract": "contracts/Testing/Setup.sol:Setup",
        "label": "stable",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITestToken)4478"
      },
      {
        "astId": 4485,
        "contract": "contracts/Testing/Setup.sol:Setup",
        "label": "bord",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITestToken)4478"
      },
      {
        "astId": 4488,
        "contract": "contracts/Testing/Setup.sol:Setup",
        "label": "asset",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITestToken)4478"
      }
    ],
    "types": {
      "t_contract(ITestToken)4478": {
        "encoding": "inplace",
        "label": "contract ITestToken",
        "numberOfBytes": "20"
      }
    }
  }
}